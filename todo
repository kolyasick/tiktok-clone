-- Переделать БД, добавить таблицу Profile, связать с User (+)
-- Переделать функционал получения User, в сессию записывать только user_id, и получать Profile отдельным запросом (+)
-- Записать пользователя в Store (+)


-- Сделать функционал добавления видео (+)
-- Вывести все видое на главную (+)
-- Сделать добавление комментариев, лайков (+-)

-- Переделать верстку, дизайн опционально
-- Сделать lazy load, автовоспроизведение видео
-- Редактирование профиля
-- Добавить middleware на проверку авторизации


!!! ВЗЯТЬ ПРОЕКТ С ЧАТОМ, И ПЕРЕНЕСТИ ВСЕ ТУДА !!!|




generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./db.sqlite"
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String

  roleId   Int 
  role     Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)

  profile  Profile?

  friendshipsAsUser Friendship[] @relation("userFriendships")
  friendshipsAsFriend Friendship[] @relation("friendFriendships")

  chatParticipants ChatParticipant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id      Int       @id @default(autoincrement())
  userId  Int       @unique
  user    User      @relation(fields: [userId], references: [id])
  name    String
  avatar  String    @default("default.jpg")

  videos   Video[]
  comments Comment[]
  likes    Like[]
}

model Role {
  id      Int    @id @default(autoincrement())
  title   String
  User    User[]
}

model Video {
  id       Int      @id @default(autoincrement())
  title    String
  url      String?
  profileId Int
  profile  Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  likes    Like[]
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  profileId Int
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  videoId   Int
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  profileId Int
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  videoId   Int
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friendship {
  id        Int      @id @default(autoincrement())
  userId    Int
  friendId  Int
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation("userFriendships", fields: [userId], references: [id])
  friend    User     @relation("friendFriendships", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}

model Chat {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants ChatParticipant[]
  messages     Message[]
}

model ChatParticipant {
  id        Int      @id @default(autoincrement())
  chatId    Int
  userId    Int
  chat      Chat     @relation(fields: [chatId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([chatId, userId])
}

model Message {
  id        Int      @id @default(autoincrement())
  text      String
  chatId    Int
  senderId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat      Chat     @relation(fields: [chatId], references: [id])
  sender    User     @relation(fields: [senderId], references: [id])
}
