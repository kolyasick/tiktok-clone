generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  roleId    String   @db.ObjectId
  role      Role     @relation(fields: [roleId], references: [id])
  profile   Profile?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  userId    String       @unique @db.ObjectId
  user      User         @relation(fields: [userId], references: [id])
  name      String       @unique
  avatar    String       @default("default.jpg")
  online    Boolean      @default(false)

  // Ссылки на дружбу
  friendshipsAsUser   Friendship[] @relation("userFriendships")
  friendshipsAsFriend Friendship[] @relation("friendFriendships")

  // Ссылки на чаты
  chatsAsUser1 Chat[] @relation("ChatUser1")
  chatsAsUser2 Chat[] @relation("ChatUser2")

  // Ссылки на сообщения, видео, комментарии и лайки
  messages  Message[]
  videos    Video[]
  comments  Comment[]
  likes     Like[]
}

model Role {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  users User[]
}

model Video {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  url       String?
  profileId String    @db.ObjectId
  profile   Profile   @relation(fields: [profileId], references: [id])
  likes     Like[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  profileId String   @db.ObjectId
  profile   Profile  @relation(fields: [profileId], references: [id])
  videoId   String   @db.ObjectId
  video     Video    @relation(fields: [videoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  profileId String   @db.ObjectId
  profile   Profile  @relation(fields: [profileId], references: [id])
  videoId   String   @db.ObjectId
  video     Video    @relation(fields: [videoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friendship {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  friendId  String   @db.ObjectId
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      Profile  @relation("userFriendships", fields: [userId], references: [id])
  friend    Profile  @relation("friendFriendships", fields: [friendId], references: [id])

  @@unique([userId, friendId])
  @@unique([friendId, userId])
}

model Chat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  user1Id   String    @db.ObjectId
  user2Id   String    @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user1     Profile   @relation("ChatUser1", fields: [user1Id], references: [id])
  user2     Profile   @relation("ChatUser2", fields: [user2Id], references: [id])

  messages  Message[]

  @@unique([user1Id, user2Id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  chatId    String   @db.ObjectId
  senderId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat      Chat     @relation(fields: [chatId], references: [id])
  sender    Profile  @relation(fields: [senderId], references: [id])
}