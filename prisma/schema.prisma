generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String

  roleId   Int 
  role     Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)

  profile  Profile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id      Int       @id @default(autoincrement())
  userId  Int       @unique
  user    User      @relation(fields: [userId], references: [id])
  name    String     @unique
  avatar  String    @default("default.jpg")
  online  Boolean   @default(false)

  friendshipsAsUser Friendship[] @relation("userFriendships")
  friendshipsAsFriend Friendship[] @relation("friendFriendships")

  chatsAsUser1 Chat[] @relation("ChatUser1") 
  chatsAsUser2 Chat[] @relation("ChatUser2") 
  messages Message[]

  videos   Video[]
  comments Comment[]
  likes    Like[]
}

model Role {
  id      Int    @id @default(autoincrement())
  title   String
  User    User[]
}

model Video {
  id       Int      @id @default(autoincrement())
  title    String
  url      String?
  profileId Int
  profile  Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  likes    Like[]
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  profileId Int
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  videoId   Int
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  profileId Int
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  videoId   Int
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friendship {
  id        Int      @id @default(autoincrement())
  userId    Int
  friendId  Int
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      Profile     @relation("userFriendships", fields: [userId], references: [id])
  friend    Profile     @relation("friendFriendships", fields: [friendId], references: [id])

  @@unique([userId, friendId]) 
  @@unique([friendId, userId])

}

model Chat {
  id        Int      @id @default(autoincrement())
  user1Id   Int    
  user2Id   Int      
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user1     Profile     @relation("ChatUser1", fields: [user1Id], references: [id])
  user2     Profile     @relation("ChatUser2", fields: [user2Id], references: [id])

  messages  Message[]

  @@unique([user1Id, user2Id])
}

model Message {
  id        Int      @id @default(autoincrement())
  text      String
  chatId    Int
  senderId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat      Chat     @relation(fields: [chatId], references: [id])
  sender    Profile     @relation(fields: [senderId], references: [id])
}