generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  verified Boolean @default(false)
  isBlocked Boolean @default(false)

  roleId   Int 
  role     Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)

  profile  Profile?
  block    Block?
  activationLink ActivationLink? 


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActivationLink {
  id    Int @id @default(autoincrement())
  link  String @unique
  userId Int @unique
  user   User  @relation(fields: [userId], references: [id])
}

model Block {
  id      Int       @id @default(autoincrement())
  reason  String 
  info    String
  until   DateTime
  userId  Int       @unique

  user    User      @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id      Int       @id @default(autoincrement())
  userId  Int       @unique
  user    User      @relation(fields: [userId], references: [id])
  name    String    @unique
  bio     String    @default("No bio yet")
  avatar  String    @default("avatar.avif")
  online  Boolean   @default(false)

  followsAsFollower Follows[] @relation("userFollowers")
  followsAsFollowing Follows[] @relation("userFollowing")

  chatsAsUser1 Chat[] @relation("ChatUser1") 
  chatsAsUser2 Chat[] @relation("ChatUser2") 
  messages Message[]

  videos   Video[]
  comments Comment[]
  likes    Like[]
  commentLikes CommentLike[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id      Int    @id @default(autoincrement())
  title   String  @unique
  User    User[]
}

model Video {
  id       String      @id @default(uuid())
  title    String
  url      String?
  isBlocked Boolean @default(false)
  profileId Int
  profile  Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  likes    Like[]
  comments Comment[]

  statusId Int
  
  status   Status    @relation(fields: [statusId], references: [id], onDelete: Cascade)
  blockReason String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Status {
  id      Int       @id @default(autoincrement())
  title   String    @unique 
  Video   Video[]
}

model Like {
  id        Int      @id @default(autoincrement())
  profileId Int
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  videoId   String
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([profileId, videoId])
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  profileId Int
  commentId Int
  reaction  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile  @relation(fields: [profileId], references: [id])
  comment   Comment  @relation("CommentLikes", fields: [commentId], references: [id])
  commentDislike Comment @relation("CommentDislikes", fields: [commentId], references: [id])

  @@unique([profileId, commentId])
  @@index([profileId])
  @@index([commentId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  videoId   String
  profileId  Int
  parentId  Int?
  hasReplies Boolean @default(false)
  
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  profile   Profile  @relation(fields: [profileId], references: [id])
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  likes     CommentLike[] @relation("CommentLikes")
  dislikes  CommentLike[] @relation("CommentDislikes")

  @@index([videoId])
  @@index([profileId])
  @@index([parentId])
}

model Follows {
  id        Int      @id @default(autoincrement())
  userId    Int
  friendId  Int

  status    String   @default("pending")
  isFollowing Boolean @default(false)
  isFriend   Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      Profile     @relation("userFollowers", fields: [userId], references: [id])
  friend    Profile     @relation("userFollowing", fields: [friendId], references: [id])

  @@unique([userId, friendId]) 
  @@unique([friendId, userId])
}

model Chat {
  id        Int      @id @default(autoincrement())
  user1Id   Int    
  user2Id   Int      
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user1     Profile     @relation("ChatUser1", fields: [user1Id], references: [id])
  user2     Profile     @relation("ChatUser2", fields: [user2Id], references: [id])

  messages  Message[]

  @@unique([user1Id, user2Id])
}

model Message {
  id        Int      @id @default(autoincrement())
  text      String
  chatId    Int
  senderId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat      Chat     @relation(fields: [chatId], references: [id])
  sender    Profile     @relation(fields: [senderId], references: [id])
}